"return the data with values of cylinders not less than 4",
"filter so gear equal 6")
data_colnames = .data
talk_filter(df, cmd)
devtools::load_all(".")
talk_filter(df, cmd)
talk_filter_expr(df, cmd)
res = talk_filter_expr(df, cmd)
res
res[[1]]
class(res[[1]])
data_colnames = colnames(.data)
out = talk_filter_expr(data_colnames, cmd)
out
devtools::load_all(".")
df = tibble::rownames_to_column(mtcars, var = "car")
.data = df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
cmd = c("subset rows, by horsepower > 100",
"keep rows where horsepower less than 100",
"drop rows where American equals 1",
"drop rows where American is equal to 1",
"drop rows where American is equal 1",
"drop values in column 6 not equal to 4",
"filter the rows where American is not less than or equal 0",
"return the data with values of cylinders not less than 4",
"filter so gear equal 6")
data_colnames = .data
res = talk_filter_expr(df, cmd)
res
class(res[[1]])
rlang::expr(resres]])
rlang::expr(res[[1]])
?rlang::expr(res[[1]])
data_colnames = colnames(.data)
out = talk_filter_expr(data_colnames, cmd)
out
# x = out[[5]]
out = lapply(out, function(x) {
filter(.data = .data, !!! rlang::parse_exprs(x))
})
out[[1]]
x = out[[1]]
filter(.data = .data, !!! rlang::parse_exprs(x))
if (is.data.frame(data_colnames)) {
data_colnames = colnames(data_colnames)
}
cn_df = tibble(
var = tolower(data_colnames),
df_var = data_colnames
)
if (any(duplicated(cn_df$var))) {
stop("Need to have distinct column names, even with case")
}
cn = tolower(data_colnames)
cmd = process_cmd(cmd, drop_punct = FALSE)
cmd = remove_punct_keep_ops(cmd)
cmd = talk_process_filter_cmd(cmd)
cmd = remove_df(cmd)
if (!grepl("condition", cmd)) {
stop("No condition found!")
}
split_condition = strsplit(cmd, split = "condition")
split_condition = lapply(split_condition, trimws)
split_condition = t(sapply(split_condition, function(x) {
x = x[ !x %in% ""]
x = c(x[1], paste(x[2:length(x)], collapse = " "))
res = is_condition_not(x[1])
c(x, res$not_condition, res$clean_cmd, res$cmd)
}))
colnames(split_condition) = c("command", "condition",
"is_not",
"command_clean",
"attempt_clean")
split_condition = tibble::as_tibble(split_condition)
split_condition$is_not = as.logical(split_condition$is_not )
names(cn) = data_colnames
search_words = c("filter", "subset", "select")
search_str = paste0(search_words, collapse = "|")
stopifnot(grepl(search_str, x = split_condition$command_clean))
my_stopwords = c("the", "by", "it", "and",
"with", "values", "a",
"is", "of",
"in",
"so", "that",
"value",
"row",
"have",
"where",
"only",
"rows", "want")
my_stopwords = c(my_stopwords, search_words)
ss = strsplit(split_condition$condition, " ")
ss = sapply(ss, function(x) {
paste(x[ !x %in% my_stopwords], collapse = " ")
})
split_condition$condition = ss
operators = c("%in%",
">=", ">",
"<=", "<",
"==", "!=")
column_indices = function(cmd, cn) {
cmd = trimws(cmd)
ind = grepl("column", cmd)
cn_name = paste0("column", 1:length(cn))
# ind = ind | grepl("^\\d*$", cmd)
if (any(ind)) {
xx = cmd[ind]
for (icn in seq_along(cn)) {
xx = gsub(cn_name[icn], cn[icn], xx)
}
xx = trimws(xx)
cmd[ind] = xx
}
return(cmd)
}
ss = sapply(split_condition$condition, column_indices, cn = cn)
split_condition$condition  = ss
split_condition = split_condition %>%
mutate(condition = paste0(ifelse(is_not, "!", ""),
"(", split_condition$condition, ")")
)
split_condition$condition
rlang::expr(split_condition$condition[1])
rlang::quo(split_condition$condition[1])
rlang::sym(split_condition$condition[1])
rlang::enqul(split_condition$condition[1])
rlang::enquo(split_condition$condition[1])
devtools::load_all(".")
df = tibble::rownames_to_column(mtcars, var = "car")
.data = df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
cmd = c("subset rows, by horsepower > 100",
"keep rows where horsepower less than 100",
"drop rows where American equals 1",
"drop rows where American is equal to 1",
"drop rows where American is equal 1",
"drop values in column 6 not equal to 4",
"filter the rows where American is not less than or equal 0",
"return the data with values of cylinders not less than 4",
"filter so gear equal 6")
data_colnames = .data
res = talk_filter_expr(df, cmd)
res
# stopifnot(rlang::is_string(cmd))
data_colnames = colnames(.data)
out = talk_filter_expr(data_colnames, cmd)
out
# x = out[[5]]
out = lapply(out, function(x) {
filter(.data = .data, !!! rlang::parse_exprs(x))
})
# x = out[[5]]
out = lapply(out, function(x) {
filter(.data = .data, !!! x)
})
# x = out[[5]]
out = lapply(out, function(x) {
filter(.data = .data, !!! enquo(x))
})
# x = out[[5]]
out = lapply(out, function(x) {
filter(.data = .data, !! enquo(x))
})
out[[1]]
!!out[[1]]
filter(.data, !!out[[1]])
filter(.data, !!quo(out[[1]]))
filter(.data, !!!quo(out[[1]]))
head(.data)
# x = out[[5]]
out = lapply(out, function(x) {
filter(.data = .data, !!enquo(x))
})
# stopifnot(rlang::is_string(cmd))
data_colnames = colnames(.data)
out = talk_filter_expr(data_colnames, cmd)
# x = out[[5]]
out = lapply(out, function(x) {
filter(.data = .data, !!enquo(x))
})
# x = out[[5]]
out = lapply(out, function(x) {
filter(.data = .data, !!quo(x))
})
devtools::load_all(".")
df = tibble::rownames_to_column(mtcars, var = "car")
.data = df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
cmd = c("subset rows, by horsepower > 100",
"keep rows where horsepower less than 100",
"drop rows where American equals 1",
"drop rows where American is equal to 1",
"drop rows where American is equal 1",
"drop values in column 6 not equal to 4",
"filter the rows where American is not less than or equal 0",
"return the data with values of cylinders not less than 4",
"filter so gear equal 6")
data_colnames = .data
res = talk_filter_expr(df, cmd)
res
res[[5]]
filter(.data, !!!enquo(res[[5]]))
filter(.data, !!!res[[5]])
filter(.data, !!res[[5]])
filter(.data, !!quo(res[[5]]))
filter(.data, !!quo(as.name(res[[5]])))
RES[[5]]
res[5]
res[[5]]
?
library(friendlyeval)
devtools::install_github("MilesMcBain/friendlyeval")
library(talkr)
devtools::load_all(".")
df = tibble::rownames_to_column(mtcars, var = "car")
.data = df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
cmd = c("subset rows, by horsepower > 100",
"keep rows where horsepower less than 100",
"drop rows where American equals 1",
"drop rows where American is equal to 1",
"drop rows where American is equal 1",
"drop values in column 6 not equal to 4",
"filter the rows where American is not less than or equal 0",
"return the data with values of cylinders not less than 4",
"filter so gear equal 6")
data_colnames = .data
res = talk_filter_expr(df, cmd)
res
talk_filter(df, cmd)
res
library(talkr)
devtools::load_all(".")
df = tibble::rownames_to_column(mtcars, var = "car")
.data = df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
cmd = c("subset rows, by horsepower > 100",
"keep rows where horsepower less than 100",
"drop rows where American equals 1",
"drop rows where American is equal to 1",
"drop rows where American is equal 1",
"drop values in column 6 not equal to 4",
"filter the rows where American is not less than or equal 0",
"return the data with values of cylinders not less than 4",
"filter so gear equal 6")
data_colnames = .data
res = talk_filter_expr(df, cmd)
talk_filter(df, cmd)
res$condition
# stopifnot(rlang::is_string(cmd))
data_colnames = colnames(.data)
out = talk_filter_expr(data_colnames, cmd)
out
out = out$condition
out
.data
# x = out[[5]]
out = lapply(out, function(x) {
filter(.data = .data, !!friendlyeval::treat_string_as_expr(x))
})
library(talkr)
devtools::load_all(".")
df = tibble::rownames_to_column(mtcars, var = "car")
.data = df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
cmd = c("subset rows, by horsepower > 100",
"keep rows where horsepower less than 100",
"drop rows where American equals 1",
"drop rows where American is equal to 1",
"drop rows where American is equal 1",
"drop values in column 6 not equal to 4",
"filter the rows where American is not less than or equal 0",
"return the data with values of cylinders not less than 4",
"filter so gear equal 6")
data_colnames = .data
res = talk_filter_expr(df, cmd)
talk_filter(df, cmd)
df = tibble::rownames_to_column(mtcars, var = "car")
.data = df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
cmd = c("subset rows, by horsepower > 100",
"keep rows where horsepower less than 100",
"drop rows where American equals 1",
"drop rows where American is equal to 1",
"drop rows where American is equal 1",
"drop values in column 6 not equal to 4",
"filter the rows where American is not less than or equal 0",
"return the data with values of cylinders not less than 4",
"filter so gear equal 6")
data_colnames = .data
res = talk_filter_expr(.data, cmd)
talk_filter(.data, cmd)
res = talk_filter(.data, cmd)
res
library(talkr)
devtools::load_all(".")
df = tibble::rownames_to_column(mtcars, var = "car")
.data = df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
cmd = c("subset rows, by horsepower > 100",
"keep rows where horsepower less than 100",
"drop rows where American equals 1",
"drop rows where American is equal to 1",
"drop rows where American is equal 1",
"drop values in column 6 not equal to 4",
"filter the rows where American is not less than or equal 0",
"return the data with values of cylinders not less than 4",
"filter so gear equal 6")
data_colnames = .data
sc = talk_filter_expr(.data, cmd)
res = talk_filter(.data, cmd)
res
library(tibble)
library(dplyr)
df = mtcars %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)#'
cmds = c("subset rows, by horsepower > 100",
"keep rows where horsepower less than 100",
"drop rows where American equals 1",
"drop rows where American is equal to 1",
"drop rows where American is equal 1",
"drop values in column 6 not equal to 4",
"filter the rows where American is not less than or equal 0",
"return the data with values of cylinders not less than 4",
"filter so gear equal 6")
results = lapply(cmds, talk_filter, .data = df)
results
library(tibble)
library(dplyr)
df = mtcars %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)#'
cmds = c("subset rows, by horsepower > 100",
"keep rows where horsepower less than 100",
"drop rows where American equals 1",
"drop rows where American is equal to 1",
"drop rows where American is equal 1",
"drop values in column 6 not equal to 4",
"filter the rows where American is not less than or equal 0",
"return the data with values of cylinders not less than 4",
"filter so gear equal 6")
results = lapply(cmds, talk_filter, .data = df)
cyl = df %>%
talk_filter("filter cylinders is equal to 6")
sum(df$)head(df)
head(df)
cmd = "filter cylinders is equal to 6"
if (is.data.frame(data_colnames)) {
data_colnames = colnames(data_colnames)
}
cn_df = tibble(
var = tolower(data_colnames),
df_var = data_colnames
)
if (any(duplicated(cn_df$var))) {
stop("Need to have distinct column names, even with case")
}
cn = tolower(data_colnames)
cmd = process_cmd(cmd, drop_punct = FALSE)
cmd = remove_punct_keep_ops(cmd)
cmd = talk_process_filter_cmd(cmd)
cmd = remove_df(cmd)
cmd
if (!grepl("condition", cmd)) {
stop("No condition found!")
}
split_condition = strsplit(cmd, split = "condition")
split_condition = lapply(split_condition, trimws)
split_condition = t(sapply(split_condition, function(x) {
x = x[ !x %in% ""]
x = c(x[1], paste(x[2:length(x)], collapse = " "))
res = is_condition_not(x[1])
c(x, res$not_condition, res$clean_cmd, res$cmd)
}))
library(talkr)
df = tibble::rownames_to_column(mtcars, var = "car")
.data = df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
data_colnames = .data
sc = talk_filter_expr(.data, cmd)
res = talk_filter(.data, cmd)
library(tibble)
library(dplyr)
df = tibble::rownames_to_column(mtcars, var = "car")
df = df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)#'
cmds = c("subset rows, by horsepower > 100",
"keep rows where horsepower less than 100",
"drop rows where American equals 1",
"drop rows where American is equal to 1",
"drop rows where American is equal 1",
"drop values in column 6 not equal to 4",
"filter the rows where American is not less than or equal 0",
"return the data with values of cylinders not less than 4",
"filter so gear equal 6")
results = lapply(cmds, talk_filter, .data = df)
cyl = df %>%
talk_filter("filter if cylinders is equal to 6")
testthat::expect_true(all(cyl$cylinders == 6))
#'         "drop rows where American is equal to 1",
#'         "drop rows where American is equal 1",
#'         "drop values in column 6 not equal to 4",
#'         "filter the rows where American is not less than or equal 0",
#'         "return the data with values of cylinders not less than 4",
#'         "filter so gear equal 6")
#'  results = lapply(cmds, talk_filter, .data = df)
#'  cyl = df %>%
#'  talk_filter("filter if cylinders is equal to 6")
#' testthat::expect_true(all(cyl$cylinders == 6))
talk_filter = function(.data, cmd) {
# stopifnot(rlang::is_string(cmd))
data_colnames = colnames(.data)
out = talk_filter_expr(data_colnames, cmd)
out = out$condition
# x = out[[5]]
colnames(.data) = tolower(data_colnames)
out = lapply(out, function(x) {
ret = filter(.data = .data, !!friendlyeval::treat_string_as_expr(x))
colnames(ret) = data_colnames
ret
})
if (length(cmd) == 1) {
return(out[[1]])
}
out
}
library(tibble)
library(dplyr)
df = tibble::rownames_to_column(mtcars, var = "car")
df = df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)#'
cmds = c("subset rows, by horsepower > 100",
"keep rows where horsepower less than 100",
"drop rows where American equals 1",
"drop rows where American is equal to 1",
"drop rows where American is equal 1",
"drop values in column 6 not equal to 4",
"filter the rows where American is not less than or equal 0",
"return the data with values of cylinders not less than 4",
"filter so gear equal 6")
results = lapply(cmds, talk_filter, .data = df)
cyl = df %>%
talk_filter("filter if cylinders is equal to 6")
testthat::expect_true(all(cyl$cylinders == 6))
library(talkr)
shiny::runApp('inst/shiny-examples/sort_better')
library(talkr)
shiny::runApp()
library(talkr)
runApp()
library(talkr)
runApp()
library(talkr)
runApp()
library(talkr)
runApp()
library(talkr)
shiny::runApp('inst/shiny-examples/sort_better')
talk_expr(df, "filter my shit > 4")
df
df = tibble::rownames_to_column(mtcars, var = "car")
.data = df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
data_colnames = .data
talk_expr(df, "filter my shit > 4")
talk_expr
library(talkr)
talk_expr(df, "filter my shit > 4")
library(talkr)
runApp('inst/shiny-examples/sort_better')
