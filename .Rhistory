cmd = split_condition$condition)
split_condition$n = 1:nrow(split_condition)
split_condition = split(split_condition, split_condition$n)
variables = mapply(function(v, s) {
v$is_not = s$is_not
v = v %>%
ungroup() %>%
arrange(var_num) %>%
mutate(condition = ifelse(
is_not,
paste0("-", df_var),
df_var
))
v$command_clean = s$command_clean
v
}, variables, split_condition, SIMPLIFY = FALSE)
devtools::load_all("~/Dropbox/Packages/talkr")
library(tibble)
library(dplyr)
df = tibble::rownames_to_column(mtcars, var = "car")
df = df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
.data = df
cmds = c("subset columns 5 and 6",
"select column horsepower",
"drop columns 1 and 3 american")
cmd = cmds
data_colnames = colnames(df)
is_not = NULL
rm(list = "is_not")
if (is.data.frame(data_colnames)) {
data_colnames = colnames(data_colnames)
}
cn_df = tibble(
var = tolower(data_colnames),
df_var = data_colnames
)
if (any(duplicated(cn_df$var))) {
stop("Need to have distinct column names, even with case")
}
cn = tolower(data_colnames)
names(cn) = data_colnames
cmd = process_cmd(cmd, drop_punct = FALSE)
cmd = fix_contractions(cmd)
cmd = remove_punct_keep_ops(cmd)
cmd = talk_process_select_cmd(cmd)
cmd = remove_df(cmd)
not_condition = clean_cmd = NULL
rm(list = c("not_condition", "clean_cmd"))
split_condition = is_condition_not(cmd, clean_cmd = "select")
split_condition =  tibble::as_tibble(split_condition)
split_condition = split_condition %>%
rename(is_not = not_condition,
command_clean = clean_cmd,
condition = cmd)
split_condition$is_not = as.logical(split_condition$is_not )
search_words = c("filter", "subset", "select")
search_str = paste0(search_words, collapse = "|")
stopifnot(grepl(search_str, x = split_condition$command_clean))
my_stopwords = c("the", "by", "it", "and",
"with", "values", "a",
"is", "of",
"in",
"up",
"there",
"are",
"filter",
"select",
"subset",
"so", "that",
"value",
"row",
"have",
"where",
"only",
"rows", "want")
my_stopwords = c(my_stopwords, search_words)
ss = strsplit(split_condition$condition, " ")
ss = sapply(ss, function(x) {
paste(x[ !x %in% my_stopwords], collapse = " ")
})
split_condition$condition = ss
variables = talk_get_colnames(
data_colnames = data_colnames,
cmd = split_condition$condition)
split_condition$n = 1:nrow(split_condition)
split_condition = split(split_condition, split_condition$n)
varaibles
variables
split_condition
variables = mapply(function(v, s) {
v$is_not = s$is_not
v = v %>%
ungroup() %>%
arrange(var_num) %>%
mutate(condition = ifelse(
is_not,
paste0("-", df_var),
df_var
))
v$command_clean = s$command_clean
v
}, variables, split_condition, SIMPLIFY = FALSE)
variables
out = talk_select_expr(data_colnames, cmd
cmd
out = talk_select_expr(data_colnames, cmd
)
out
if (verbose) {
message(out)
}
# x = out[[5]]
colnames(.data) = tolower(data_colnames)
out
out = lapply(out, function(x) {
x = x$condition
ret = select(.data = .data, !!friendlyeval::treat_string_as_expr(x))
# need match
ret
})
out
out = lapply(out, function(x) {
x = x$condition
ret = select(.data = .data, !!friendlyeval::treat_strings_as_exprs(x))
# need match
ret
})
out
lapply(out, function(x) x$condit)
lapply(out, function(x) x$condition)
x = out[[3]]
x
x = x$condition
x
select(.data = .data, !!friendlyeval::treat_strings_as_exprs(x))
head(.data)
out = lapply(out, function(x) {
x = x$condition
ret = select(.data = .data, !!!friendlyeval::treat_strings_as_exprs(x))
# need match
ret
})
library(tibble)
library(dplyr)
df = tibble::rownames_to_column(mtcars, var = "car")
df = df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
.data = df
cmds = c("subset columns 5 and 6",
"select column horsepower",
"drop columns 1 and 3 american")
cmd = cmds
data_colnames = colnames(df)
data_colnames = colnames(.data)
names(data_colnames) = tolower(data_colnames)
out = talk_select_expr(data_colnames, cmd
)
out
# x = out[[5]]
out = lapply(out, function(x) {
x = x$condition
ret = select(.data = .data, !!!friendlyeval::treat_strings_as_exprs(x))
# need match
ret
})
out
library(talkr)
library(tibble)
library(dplyr)
df = tibble::rownames_to_column(mtcars, var = "car")
df = df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
.data = df
cmds = c("subset columns 5 and 6",
"select column horsepower",
"drop columns 1 and 3 american")
cmd = cmds
data_colnames = colnames(df)
exprs = lapply(cmds, talk_select_expr, data_colnames = df)
exprs = sapply(exprs, function(x) x$condition)
results = lapply(cmds, talk_select, .data = df)
results
cyl = df %>%
talk_select("select if cylinders American")
library(talkr)
library(tibble)
library(dplyr)
df = tibble::rownames_to_column(mtcars, var = "car")
df = df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
.data = df
cmds = c("subset columns 5 and 6",
"select column horsepower",
"drop columns 1 and 3 american")
cmd = cmds
data_colnames = colnames(df)
exprs = lapply(cmds, talk_select_expr, data_colnames = df)
exprs = sapply(exprs, function(x) x$condition)
results = lapply(cmds, talk_select, .data = df)
cyl = df %>%
talk_select("select if cylinders American")
colnames(cyl)
dput(colnames(cyl))
testthat::expect_true(all(colnames(cyl) == c("cylinders", "American")))
library(talkr)
shiny::runApp()
library(talkr)
library(tibble)
library(dplyr)
df = tibble::rownames_to_column(mtcars, var = "car")
df = df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
.data = df
cmds = c("subset columns 5 and 6",
"select column horsepower",
"drop columns 1 and 3 american",
"select MPG column for 5")
cmd = cmds
data_colnames = colnames(df)
exprs = lapply(cmds, talk_select_expr, data_colnames = df)
library(talkr)
library(tibble)
library(dplyr)
df = tibble::rownames_to_column(mtcars, var = "car")
df = df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
.data = df
cmds = c("subset columns 5 and 6",
"select column horsepower",
"drop columns 1 and 3 american",
"select MPG column for 5")
cmd = cmds
data_colnames = colnames(df)
exprs = lapply(cmds, talk_select_expr, data_colnames = df)
exprs
exprs = sapply(exprs, function(x) x$condition)
exprs
exprs = lapply(cmds, talk_select_expr, data_colnames = df)
exprs
exprs = sapply(cmds, talk_select_expr, data_colnames = df)
exprs
exprs = sapply(exprs, function(x) x$condition)
exprs
results = lapply(cmds, talk_select, .data = df)
cyl = df %>%
talk_select("select if cylinders American")
testthat::expect_true(all(colnames(cyl) == c("cylinders", "American")))
library(talkr)
shiny::runApp('inst/shiny-examples/sort_better')
library(shiny)
library(DT)
library(talkr)
library(dplyr)
df = tibble::rownames_to_column(mtcars, var = "car")
df = df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
xdf = df
L = list(xdf)
cmd = "select MPG column 5"
cmd = unique(cmd)
print(cmd)
if (is.null(cmd)) {
cmd = ""
}
if (cmd == "say run something") {
cmd = ""
}
print(cmd)
cmd = sub("^group by", "group_by", cmd)
cmd = gsub(" for( |$)", " four\\1", cmd)
cmd
if (grepl("^reset", cmd)) {
df <<- xdf
L <<- list(df)
} else if (grepl("undo", cmd)) {
L <<- L[-1]
if (length(L) == 0) {
L <<- list(df)
}
} else {
df <<- df %>%
talk(cmd, error_find_function = FALSE)
L <<- c(list(df), L)
}
library(talkr)
runApp('inst/shiny-examples/sort_better')
library(talkr)
shiny::runApp('inst/shiny-examples/sort_better')
runApp()
L
runApp()
run_df
library(shiny)
library(DT)
library(talkr)
library(dplyr)
run_df = tibble::rownames_to_column(mtcars, var = "car")
run_df = run_df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
xdf = run_df
L = list(xdf)
run_expr <- run_df %>%
talk_expr("select mpg", error_find_function = FALSE)
run_expr
library(talkr)
runApp()
run_df
cmd = "select four 5 and 6"
run_df %>%
talk_expr(cmd, error_find_function = FALSE)
v
talk_expr
library(talkr)
run_df %>%
talk_expr(cmd, error_find_function = FALSE)
library(talkr)
runApp()
?reactive
runApp()
L
names(L)
runApp()
library(shiny)
?renderPrint
runApp()
?h3
runApp()
?renderTable
runApp()
cmd = "group_by mpg"
res <- run_df %>%
talk_expr(cmd, error_find_function = FALSE)
df
talk_expr
cmd
stopifnot(rlang::is_string(cmd))
cmd = gsub("group_by", "groupby", tolower(cmd))
cmd = process_cmd(cmd)
cmd = gsub("groupby", "group_by", cmd)
search_words = c("sort", "arrange", "order")
search_str = paste0(search_words, collapse = "|")
dplyr_func = ""
if (grepl(search_str, x = cmd)) {
dplyr_func = "arrange"
}
fix_contractions = function(cmd) {
cmd = gsub("doesn't", "do not", cmd)
cmd = gsub("don't", "do not", cmd)
# be verbs
cmd = gsub(" isn't", "are not", cmd)
cmd = gsub(" aren't", "are not", cmd)
cmd = gsub(" weren't", "are not", cmd)
cmd = gsub(" cannot", "are not", cmd)
cmd
}
trim_multi_space = function(x) {
x = trimws(x)
x = gsub("\\s+", " ", x)
}
process_cmd = function(
cmd,
lower.case = TRUE,
drop_punct = TRUE) {
cmd = trimws(cmd)
# cmd = paste(cmd, collapse = " ")
if (lower.case) {
cmd = tolower(cmd)
}
# take out
cmd = trim_multi_space(cmd)
# remove puncutation
string = paste0("[", ifelse(drop_punct, "[:punct:]", ""),
"[:blank:]]+")
cmd = gsub(string, " ", cmd)
cmd = trim_multi_space(cmd)
return(cmd)
}
punct = function() {
c("!", '"', "#", "$", "%", "&", "'", "(", ")", "*",
"+", ",", "-", ".", "/", ":", ";", "<", "=", ">",
"?", "@", "[", "\\", "]", "^", "_", "`", "{", "|", "}", "~")
}
no_ops = function() {
setdiff(punct(), c("!", "=", ">", "<", "|", "&"))
}
remove_punct_keep_ops = function(cmd) {
for (i in no_ops()) {
cmd = gsub(i, " ", cmd, fixed = TRUE)
}
cmd = trim_multi_space(cmd)
}
remove_df = function(cmd) {
cmd = gsub("data frame", "", cmd)
cmd = gsub("data[.]frame", "", cmd)
cmd = gsub("data set", "", cmd)
cmd = gsub("the data", "", cmd)
cmd = gsub("the sheet", "", cmd)
cmd = trim_multi_space(cmd)
cmd
}
is_condition_not = function(cmd, clean_cmd = "filter") {
all_terms = c("filter out",
"subset out",
"select out",
"remove row",
"remove column",
"drop (|out |off )row",
"drop (|out |off )column",
"remove",
"drop",
"get rid of",
"not select",
"not filter",
"not keep",
"do not keep")
terms = paste(all_terms, collapse = "|")
terms = paste0("^", terms)
not_condition = grepl(terms, cmd)
for (iterm in all_terms) {
cmd = gsub(iterm, paste0(clean_cmd, " "), cmd)
}
cmd = trim_multi_space(cmd)
L = list(
not_condition = not_condition,
clean_cmd = clean_cmd,
cmd = cmd)
return(L)
}
stopifnot(rlang::is_string(cmd))
cmd = gsub("group_by", "groupby", tolower(cmd))
cmd = process_cmd(cmd)
cmd = gsub("groupby", "group_by", cmd)
search_words = c("sort", "arrange", "order")
search_str = paste0(search_words, collapse = "|")
dplyr_func = ""
if (grepl(search_str, x = cmd)) {
dplyr_func = "arrange"
}
dplyr_func
cmd
select_words = c(select_words, "order column(s|)\\s*(the|)\\s*by")
first_word = strsplit(cmd, " ")[[1]]
first_word = first_word[1]
select_words = c("select", "grab", "keep", "subset")
select_words = c(select_words, "order column(s|)\\s*(the|)\\s*by")
cmd
first_word = strsplit(cmd, " ")[[1]]
first_word = first_word[1]
first_word
library(talkr)
cmds = c("Sort df by  mpg", "arrange the data by mpg", "group_by mpg")
sapply(cmds, talk_dplyr_function)
runApp()
library(shiny)
library(DT)
library(talkr)
library(dplyr)
run_df = tibble::rownames_to_column(mtcars, var = "car")
run_df = run_df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
xdf = run_df
L = list(xdf)
names(L)[1] = "start"
cmd_history = ""
cmd = "group_by horsepower American"
res <- run_df %>%
talk_expr(cmd, error_find_function = FALSE)
cmd
devtools::load_all("~/Dropbox/Packages/talkr")
library(shiny)
library(DT)
library(talkr)
library(dplyr)
run_df = tibble::rownames_to_column(mtcars, var = "car")
run_df = run_df %>%
rename(cylinders = cyl,
horsepower = hp,
American = am,
carburetor = carb)
xdf = run_df
L = list(xdf)
names(L)[1] = "start"
cmd_history = ""
library(talkr)
