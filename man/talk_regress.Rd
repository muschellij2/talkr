% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/talk_regress.R
\name{talk_regress}
\alias{talk_regress}
\alias{talk_regress_links}
\alias{talk_regress_families}
\alias{talk_regress_expr}
\alias{talk_process_regress_cmd}
\title{Talk to Group a Data set}
\usage{
talk_regress(.data, cmd, tidy = TRUE, verbose = FALSE, ...)

talk_regress_links()

talk_regress_families()

talk_regress_expr(data_colnames, cmd, allowed_words = c("condition",
  talk_regress_links(), talk_regress_families()), ...)

talk_process_regress_cmd(cmd)
}
\arguments{
\item{.data}{The data set/\code{data.frame} to
perform the operation.}

\item{cmd}{Command to perform on the data set.}

\item{tidy}{should \code{\link{tidy}} be run?}

\item{verbose}{print diagnostic output}

\item{...}{additional arguments to pass to \code{\link{talk_get_colnames}}
or \code{\link{tidy}}}

\item{data_colnames}{column names of the data}

\item{allowed_words}{words allowed to be in the command other than
the column names}
}
\value{
A \code{data.frame} or list of them if \code{length(cmds) > 1}.
}
\description{
Talk to Group a Data set
}
\examples{
library(tibble)
library(dplyr)
df = mtcars \%>\%
  rownames_to_column(var = "car")
  cmds = c(
    "regress  mpg on cyl and hp",
    "regress  mpg on cyl and hp columns 4",
    "regress  mpg on cyl and hp and column 6",
    "regress am on  hp and column 6 on mpg binomial",
    "regress am on  hp and column 6 on mpg binomial logit link"
    )
 data_colnames = df
 .data = df
 results = lapply(cmds, talk_regress, .data = df)
 cmd = "regress mpg on cyl and hp and column 6 poisson"
 mod_1 = talk_regress(.data, cmd)
 cmd = "regress poisson cyl and hp and column 6 on mpg"
 mod_2 = talk_regress(.data, cmd)
 testthat::expect_equal(coef(mod_1), coef(mod_2))
 cmd = "regress poisson cyl and hp and column 6 on mpg"
 mod_2 = talk_regress(.data, cmd, exponentiate = TRUE)

 cmd = "regress am on  hp and column 6 and mpg binomial"
 #'
 cmd =  "regress columns 2 and 5, mpg decreasing"
 testthat::expect_error(talk_regress(.data, cmd),
 "y variable")
}
